name: Docker Build and Push

on:
  push:
    branches:
      - main
      - dev

permissions:
  contents: read

jobs:
#  build-and-push:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Set up JDK
#        uses: actions/setup-java@v3
#        with:
#          java-version: "17"
#          distribution: "adopt"
#
#      - name: Build with Gradle
#        run: ./gradlew clean build -x test --no-daemon
#
#      - name: Run tests
#        run: ./gradlew test
#
#      - name: Login to GitHub Container Registry
#        run: docker login --username derenserce --password ${{ secrets.GH_PAT }} ghcr.io
#
#      - name: Build and push image
#        run: |
#          docker build -f src/main/docker/Dockerfile.jvm -t ghcr.io/ds-disx/comment-service .
#          docker tag ghcr.io/ds-disx/comment-service:latest ghcr.io/ds-disx/comment-service:latest
#          docker push ghcr.io/ds-disx/comment-service:latest

  snyk:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Snyk CLI to check for security issues

        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb

        # For Snyk Open Source you must first set up the development environment for your application's dependencies
        # For example for Node
        #- uses: actions/setup-node@v3
        #  with:
        #    node-version: 16
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "adopt"

        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

        # Runs Snyk Code (SAST) analysis and uploads result into GitHub.
        # Use || true to not fail the pipeline
      - name: Snyk Code test
        run: snyk code test --sarif > snyk-code.sarif || true

        # Runs Snyk Open Source (SCA) analysis and uploads result to Snyk.
      - name: Snyk Open Source monitor
        run: snyk monitor --all-projects

        # Runs Snyk Infrastructure as Code (IaC) analysis and uploads result to Snyk.
        # Use || true to not fail the pipeline.
      - name: Snyk IaC test and report
        run: snyk iac test --report || true

        # Build the docker image for testing
      - name: Build a Docker image
        run: docker build -t your/image-to-test .
        # Runs Snyk Container (Container and SCA) analysis and uploads result to Snyk.
      - name: Snyk Container monitor
        run: snyk container monitor your/image-to-test --file=Dockerfile

        # Push the Snyk Code results into GitHub Code Scanning tab
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-code.sarif
  